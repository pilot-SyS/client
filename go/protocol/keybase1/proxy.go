// Auto-generated by avdl-compiler v1.3.29 (https://github.com/keybase/node-avdl-compiler)
//   Input file: avdl/keybase1/proxy.avdl

package keybase1

import (
	"github.com/keybase/go-framed-msgpack-rpc/rpc"
	context "golang.org/x/net/context"
)

type ProxyType int

const (
	ProxyType_No    ProxyType = Proxy
	ProxyType_HTTP  ProxyType = Connect
	ProxyType_Socks ProxyType = Proxy
)

func (o ProxyType) DeepCopy() ProxyType { return o }

var ProxyTypeMap = map[string]ProxyType{
	"No":    Proxy,
	"HTTP":  Connect,
	"Socks": Proxy,
}

var ProxyTypeRevMap = map[ProxyType]string{
	Proxy:   "No",
	Connect: "HTTP",
	Proxy:   "Socks",
}

func (e ProxyType) String() string {
	if v, ok := ProxyTypeRevMap[e]; ok {
		return v
	}
	return ""
}

type ProxyData struct {
	AddressWithPort string    `codec:"addressWithPort" json:"addressWithPort"`
	ProxyType       ProxyType `codec:"proxyType" json:"proxyType"`
	CertPinning     bool      `codec:"certPinning" json:"certPinning"`
}

func (o ProxyData) DeepCopy() ProxyData {
	return ProxyData{
		AddressWithPort: o.AddressWithPort,
		ProxyType:       o.ProxyType.DeepCopy(),
		CertPinning:     o.CertPinning,
	}
}

type SetProxyDataArg struct {
	ProxyData ProxyData `codec:"proxyData" json:"proxyData"`
}

type GetProxyDataArg struct {
}

type BTCInterface interface {
	SetProxyData(context.Context, ProxyData) error
	GetProxyData(context.Context) (ProxyData, error)
}

func BTCProtocol(i BTCInterface) rpc.Protocol {
	return rpc.Protocol{
		Name: "keybase.1.BTC",
		Methods: map[string]rpc.ServeHandlerDescription{
			"setProxyData": {
				MakeArg: func() interface{} {
					var ret [1]SetProxyDataArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					typedArgs, ok := args.(*[1]SetProxyDataArg)
					if !ok {
						err = rpc.NewTypeError((*[1]SetProxyDataArg)(nil), args)
						return
					}
					err = i.SetProxyData(ctx, typedArgs[0].ProxyData)
					return
				},
			},
			"getProxyData": {
				MakeArg: func() interface{} {
					var ret [1]GetProxyDataArg
					return &ret
				},
				Handler: func(ctx context.Context, args interface{}) (ret interface{}, err error) {
					ret, err = i.GetProxyData(ctx)
					return
				},
			},
		},
	}
}

type BTCClient struct {
	Cli rpc.GenericClient
}

func (c BTCClient) SetProxyData(ctx context.Context, proxyData ProxyData) (err error) {
	__arg := SetProxyDataArg{ProxyData: proxyData}
	err = c.Cli.Call(ctx, "keybase.1.BTC.setProxyData", []interface{}{__arg}, nil)
	return
}

func (c BTCClient) GetProxyData(ctx context.Context) (res ProxyData, err error) {
	err = c.Cli.Call(ctx, "keybase.1.BTC.getProxyData", []interface{}{GetProxyDataArg{}}, &res)
	return
}
